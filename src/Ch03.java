public class Ch03 {
    // 배열과 리스트
    public static void main(String[] args) {

    }
}
/*
배열
1. 메모리의 연속공간에 값이 채워져 있는 형태의 자료구조이다.
2. 인덱스를 통해 참조할 수 있다.
3. 배열의 크기는 선언할때 지정하고 늘리거나 줄일 수 없다.
4. 값을 삽입하거나 삭제하려면 인덱스 주변의 값을 이동시킬 필요가 있다.
정리 : 인덱스를 통해 빠른 출력을 해야할때 사용한다.

리스트
1. 값과 포인터를 묶은 노드라는 것을 포인터로 연결한 자료구조이다.
2. 인덱스가 없으므로 값에 접근하려면 헤드포인터부터 순서대로 접근해야 하기 때문에 속도가 느리다.
3. 포인터로 연결되어 있어서 데이터를 삽입하거나 삭제하는 연산 속도가 빠르다.
4. 선언할때 크기를 지정하지 않아도 된다. 그래서 변하기 쉬운 데이터를 다루기 유리하다.
5. 포인터를 저장할 공간이 필요하므로 배열보다 구조가 복잡하다.
정리 : 데이터를 삽입하거나 삭제하는 경우가 많고 변하기 쉬운 데이터를 다룰때 사용한다.

 */